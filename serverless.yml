service: serverless-example

plugins:
  - serverless-webpack
  # - serverless-plugin-typescript
  - serverless-dynamodb-local
  # - serverless-dynamodb-client
  - serverless-offline

custom:
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
      # Uncomment only if you already have a DynamoDB running locally
    # noStart: true

    seed:
      test:
        sources:
          - table: users-table
            sources: [./data/users.json]

  tableName: 'users-table'

resources:
  Resources:
    UsersDynamoDBTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          # - AttributeName: firstname
          #   AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          # - AttributeName: firstname
          #   KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.tableName}

provider:
  name: aws
  runtime: nodejs6.10
  stage: dev
  # region: us-east-1
  # iamRoleStatements:
  #   - Effect: Allow
  #     Action:
  #       - dynamodb:Query
  #       - dynamodb:Scan
  #       - dynamodb:GetItem
  #       - dynamodb:PutItem
  #       - dynamodb:UpdateItem
  #       - dynamodb:DeleteItem
  #     Resource:
  #       - { "Fn::GetAtt": ["UsersDynamoDBTable", "Arn" ] }
  # environment:
  #   USERS_TABLE: ${self:custom.tableName}

functions:
  app:
    handler: app/index.handler
    events:
      - http: ANY /
      - http: 'ANY {proxy+}'